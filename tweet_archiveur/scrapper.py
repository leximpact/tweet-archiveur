# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/10_scrapper_get_tweet.ipynb (unless otherwise specified).

__all__ = ['get_users_accounts', 'datetime_from_utc_to_local', 'get_user_tweets', 'get_all_tweet']

# Cell
import pandas as pd
import tweepy
from os import getenv
from dotenv import load_dotenv
import time
import datetime


# Cell
def get_users_accounts(csv = None):
    csv = getenv("USERS_CSV") if csv is None else csv
    return pd.read_csv(csv)

# Cell
# Convert UTC to Local based on the current date (do not work well around the day we change from/to summertime)
def datetime_from_utc_to_local(utc_datetime):
    now_timestamp = time.time()
    offset = datetime.datetime.fromtimestamp(now_timestamp) - datetime.datetime.utcfromtimestamp(now_timestamp)
    return utc_datetime + offset

# Cell

def get_user_tweets(user_id):
    auth = tweepy.AppAuthHandler(getenv("TWITTER_CONSUMER_KEY"), getenv("TWITTER_CONSUMER_SECRET"))
    api = tweepy.API(auth)
    tweets = []
    for tweet in tweepy.Cursor(api.user_timeline, id=user_id, tweet_mode='extended').items(100):
        #print(tweet)
        tweet = {
            'user_id':user_id,
            'tweet_id':tweet.id,
            'datetime_utc':tweet.created_at,
            'datetime_local':datetime_from_utc_to_local(tweet.created_at),
            'text':tweet.full_text, # .encode('utf8')
            'retweet':tweet.retweet_count,
            'favorite':tweet.favorite_count
        }
        tweets.append(tweet)
    return tweets

# Cell
'''
Get all the tweets of all the users
input : a list of twitter_id
output : a list of all tweets
'''
def get_all_tweet(users_id, logger = None):
    tweets = []
    total_users = len(users_id)
    for i, user_id in enumerate(users_id):
        tweets += (get_user_tweets(user_id))
        if i % 10 == 0:
            if logger is not None:
                logger.debug(f'Processing user {i} / {total_users} - {(i*100//total_users*100)*100}%')
        #if i>3:
        #    break
    return tweets